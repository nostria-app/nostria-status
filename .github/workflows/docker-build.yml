name: Build and Deploy to Azure Web Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: nostria-status-app
  AZURE_RESOURCE_GROUP: nostria-global
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.azure
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App for Containers
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Configure Azure Web App Settings
        run: |
          # Configure application settings for reliability
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
              NODE_ENV=production \
              PORT=3000 \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=true \
              WEBSITES_CONTAINER_START_TIME_LIMIT=1800 \
              WEBSITE_HEALTHCHECK_MAXPINGFAILURES=10 \
              WEBSITE_HEALTHCHECK_MAXUNHEALTHYWORKERPERCENT=100
          
          # Configure general settings including always-on
          az webapp config set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --always-on true \
            --startup-file ""
          
          # Configure container settings for reliability
          az webapp config container set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --docker-registry-server-url https://${{ env.REGISTRY }} \
            --docker-registry-server-user ${{ github.actor }} \
            --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Health Check (Manual step required)
        run: |
          echo "‚ö†Ô∏è  Health check configuration requires manual setup in Azure Portal:"
          echo "1. Go to Azure Portal > ${{ env.AZURE_WEBAPP_NAME }} > Health check"
          echo "2. Enable health check"  
          echo "3. Set Health check path: /health"
          echo "4. Set Unhealthy threshold: 10 requests"
          echo ""
          echo "Alternatively, you can configure it via Azure Portal after deployment."

      - name: Wait for deployment and verify health
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
          # Get the app URL
          APP_URL=$(az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --query defaultHostName -o tsv)
          HEALTH_URL="https://${APP_URL}/health"
          
          echo "Checking health endpoint: $HEALTH_URL"
          
          # Retry health check for up to 5 minutes
          for i in {1..30}; do
            if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Health check passed!"
              echo "üåç Application is available at: https://${APP_URL}"
              echo "‚ù§Ô∏è  Health endpoint: $HEALTH_URL"
              break
            else
              echo "‚è≥ Health check attempt $i/30 failed, retrying in 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Health check failed after 5 minutes"
              exit 1
            fi
          done

      - name: Azure logout
        run: |
          az logout